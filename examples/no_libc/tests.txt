// TODO: these were used when qmc was very simple, would be nice to resurrect unit tests

#include "dbt/core.h"
#include "dbt/execute.h"
#include "dbt/rv32i_runtime.h"
#include "dbt/translate.h"
#include "dbt/ukernel.h"
#include <cassert>
#include <csetjmp>
#include <cstring>
#include <iostream>

void mmuCheck()
{
	std::cout << "dbt mmu: checking...\n";
	dbt::mmu::Init();
	u32 start = 10 * dbt::mmu::PAGE_SIZE;
	u32 end = 20 * dbt::mmu::PAGE_SIZE;
	dbt::mmu::MMap(start, end, PROT_READ | PROT_WRITE);

	for (u32 i = start; i < end; i += 123) {
		dbt::mmu::base[i] = i & 0xff;
	}

	for (u32 i = start; i < end; i += 123) {
		assert(dbt::mmu::base[i] == (i & 0xff));
	}
	dbt::mmu::Destroy();
	std::cout << "ok\n";
}

static constexpr u32 map_start = dbt::mmu::PAGE_SIZE * 1;
static constexpr u32 stk_start = dbt::mmu::PAGE_SIZE * 2;
static constexpr u32 code_start = dbt::mmu::PAGE_SIZE * 2;
static constexpr u32 map_len = dbt::mmu::PAGE_SIZE * 4;

static void InterpreterCheckSetupMem(u32 const *code, u32 code_len)
{
	assert(code_len < map_len);
	dbt::mmu::Init();
	dbt::mmu::MMap(map_start, map_len, PROT_READ | PROT_WRITE);
	memcpy(dbt::mmu::base + code_start, code, code_len);
}

static void InterpreterCheckRun(rv32i::CPUState *state)
{
	state->ip = code_start;
	dbt::ukernel::Execute(state);
}

static void InterpreterCheck_1()
{
	/*
		ebreak
	*/
	u32 const code[] = {0x00100073U};
	InterpreterCheckSetupMem(code, sizeof(code));

	rv32i::CPUState state{};
	InterpreterCheckRun(&state);
	assert(state.ip == code_start + 4 * 0);

	dbt::mmu::Destroy();
}

static void InterpreterCheck_3()
{
	/*
		jal a0, lab1
		li a1, 123
	lab1:
		li a2, 321
		ebreak
	*/
	u32 const code[] = {0x0080056fU, 0x07b00593U, 0x14100613U, 0x00100073U};
	InterpreterCheckSetupMem(code, sizeof(code));

	rv32i::CPUState state{};
	InterpreterCheckRun(&state);
	assert(state.ip == code_start + 4 * 3);

	assert(state.gpr[10] == code_start + 4);
	assert(state.gpr[11] == 0);
	assert(state.gpr[12] == 321);
	dbt::mmu::Destroy();
}

static void InterpreterCheck_4()
{
	/*
	start:
		li sp, 8192
		jal ra, main
		ebreak
		nop
	main:
		addi    sp,sp,-16
		sw      s0,12(sp)
		addi    s0,sp,16
		li      a5,0
		mv      a0,a5
		lw      s0,12(sp)
		addi    sp,sp,16
		jr      ra
	*/
	u32 const code[] = {0x00002137U, 0x00c000efU, 0x00100073U, 0x00000013U, 0xff010113U, 0x00812623U,
			    0x01010413U, 0x00000793U, 0x00078513U, 0x00c12403U, 0x01010113U, 0x00008067U};
	InterpreterCheckSetupMem(code, sizeof(code));

	rv32i::CPUState state{};
	InterpreterCheckRun(&state);
	assert(state.ip == code_start + 4 * 2);

	assert(state.gpr[1] == code_start + 4 * 2);
	assert(state.gpr[2] == stk_start);
	assert(state.gpr[10] == 0);
	dbt::mmu::Destroy();
}

extern "C" u8 rv32i_test5_L4[];
static void InterpreterCheck_5()
{
	/*
	start:
		li sp, 8192
		jal ra, main
		ebreak
		nop
	main:
		addi    sp,sp,-32
		sw      s0,28(sp)
		addi    s0,sp,32
		sw      zero,-20(s0)
		sw      zero,-24(s0)
		j       .L3
	.L4:
		lw      a5,-20(s0)
		addi    a5,a5,2
		sw      a5,-20(s0)
		lw      a5,-24(s0)
		addi    a5,a5,1
		sw      a5,-24(s0)
	.L3:
		lw      a4,-24(s0)
		li      a5,2
		ble     a4,a5,.L4
		lw      a5,-20(s0)
		mv      a0,a5
		lw      s0,28(sp)
		addi    sp,sp,32
		jr      ra
	*/
	u32 const code[] = {0x00002137U, 0x00c000efU, 0x00100073U, 0x00000013U, 0xfe010113U, 0x00812e23U,
			    0x02010413U, 0xfe042623U, 0xfe042423U, 0x01c0006fU, 0xfec42783U, 0x00278793U,
			    0xfef42623U, 0xfe842783U, 0x00178793U, 0xfef42423U, 0xfe842703U, 0x00200793U,
			    0xfee7d0e3U, 0xfec42783U, 0x00078513U, 0x01c12403U, 0x02010113U, 0x00008067U};
	InterpreterCheckSetupMem(code, sizeof(code));

	dbt::tcache::Init();
	auto *tb_L4 = dbt::tcache::AllocateTBlock();
	tb_L4->ip = code_start + 0x28;
	tb_L4->tcode.ptr = rv32i_test5_L4;
	dbt::tcache::Insert(tb_L4);

	rv32i::CPUState state{};
	InterpreterCheckRun(&state);
	assert(state.ip == code_start + 4 * 2);

	assert(state.gpr[1] == code_start + 4 * 2);
	assert(state.gpr[2] == stk_start);
	assert(state.gpr[10] == 6);
	dbt::tcache::Destroy();
	dbt::mmu::Destroy();
}

static void InterpreterCheck_6()
{
	/* multiplication via loop, recursive fact */
	u32 const code[] = {
	    0x00002137U, 0x0c4000efU, 0x00100073U, 0x00000013U, 0xfd010113U, 0x02812623U, 0x03010413U,
	    0xfca42e23U, 0xfcb42c23U, 0xfe042623U, 0xfe042423U, 0x0200006fU, 0xfec42703U, 0xfd842783U,
	    0x00f707b3U, 0xfef42623U, 0xfe842783U, 0x00178793U, 0xfef42423U, 0xfe842703U, 0xfdc42783U,
	    0xfcf74ee3U, 0xfec42783U, 0x00078513U, 0x02c12403U, 0x03010113U, 0x00008067U, 0xfe010113U,
	    0x00112e23U, 0x00812c23U, 0x02010413U, 0xfea42623U, 0xfec42783U, 0x02078663U, 0xfec42783U,
	    0xfff78793U, 0x00078513U, 0xfd9ff0efU, 0x00050793U, 0x00078593U, 0xfec42503U, 0xf6dff0efU,
	    0x00050793U, 0x0080006fU, 0x00100793U, 0x00078513U, 0x01c12083U, 0x01812403U, 0x02010113U,
	    0x00008067U, 0xff010113U, 0x00112623U, 0x00812423U, 0x01010413U, 0x00500513U, 0xf91ff0efU,
	    0x00050793U, 0x00078513U, 0x00c12083U, 0x00812403U, 0x01010113U, 0x00008067U};
	InterpreterCheckSetupMem(code, sizeof(code));

	rv32i::CPUState state{};
	InterpreterCheckRun(&state);
	assert(state.ip == code_start + 4 * 2);

	assert(state.gpr[1] == code_start + 4 * 2);
	assert(state.gpr[2] == stk_start);
	assert(state.gpr[10] == 120);
	dbt::mmu::Destroy();
}

static void InterpreterCheck()
{
	std::cout << "interpreter: checking...\n";
	InterpreterCheck_1();
	InterpreterCheck_3();
	InterpreterCheck_4();
	InterpreterCheck_5();
	InterpreterCheck_6();
	std::cout << "ok\n";
}

int main(int argc, char **argv)
{
	mmuCheck();
	InterpreterCheck();
	return 0;
}
#endif
